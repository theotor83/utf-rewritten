# Environment Configuration for UTF-Rewritten Forum
# Copy this file to .env and update with your actual values

# Django Settings
SECRET_KEY=your-very-long-secret-key-here-make-it-random-and-secure
DEBUG=False
DJANGO_ALLOWED_HOSTS=yourdomain.com,www.yourdomain.com,localhost,127.0.0.1
DEVELOPMENT_MODE=False

# Development Redis Configuration
# When DEVELOPMENT_MODE=True, you can choose how to handle caching:
# - False (default): Uses dummy cache (no Redis needed, fastest for development)
# - True: Uses local Redis without authentication (requires Redis installed locally)
USE_REDIS_IN_DEV=False

# Database Configuration - Main Database
POSTGRES_DB=utf_main
POSTGRES_USER=utf_user
POSTGRES_PASSWORD=your-secure-postgres-password-here

# Database Configuration - Archive Database
ARCHIVE_POSTGRES_DB=utf_archive
ARCHIVE_POSTGRES_USER=utf_archive_user
ARCHIVE_POSTGRES_PASSWORD=your-secure-archive-postgres-password-here

# Redis Configuration - SECURITY CRITICAL
# Generate a strong password for Redis authentication
# Use a secure random string generator, minimum 32 characters
REDIS_PASSWORD=your-very-secure-redis-password-at-least-32-chars-long

# Admin Configuration
ADMIN_USERNAME=admin
ADMIN_PASSWORD=your-secure-admin-password-here

# Optional: Debug Toolbar (for development only)
DJANGO_DEBUG_TOOLBAR_ENABLED=False

# Optional: File Storage (if using external storage)
# S3_STORAGE=False
# AWS_ACCESS_KEY_ID=your-aws-access-key
# AWS_SECRET_ACCESS_KEY=your-aws-secret-key

# Security Notes:
# 1. Never commit this file with real credentials to version control
# 2. Use strong, unique passwords for all services
# 3. The Redis password is particularly important as it protects your cache
# 4. Consider using environment-specific values for different deployments
# 5. Regularly rotate passwords in production environments 