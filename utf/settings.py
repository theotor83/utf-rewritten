# utf/settings.py

"""
Django settings for utf project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
from django.core.management.utils import get_random_secret_key
import sys
import dj_database_url

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', get_random_secret_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

DEVELOPMENT_MODE = os.getenv("DEVELOPMENT_MODE", "False") == "True" # For databases

# Application definition

INSTALLED_APPS = [
    'rest_framework',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'forum',
    'archive',
    'precise_bbcode',
    'django.contrib.humanize',
    'rest_framework.authtoken',
]

DEBUG_TOOLBAR_ENABLED = os.getenv("DJANGO_DEBUG_TOOLBAR_ENABLED", "False") == "True"

if DEBUG_TOOLBAR_ENABLED:
    INSTALLED_APPS.append('debug_toolbar')

GET_WEBHOOK_URL = os.getenv('GET_WEBHOOK_URL')

MIDDLEWARE = [
    'forum.middleware.ForceHTTPSMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'forum.middleware.WebhookMiddleware',
]

if DEBUG_TOOLBAR_ENABLED:
    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

ROOT_URLCONF = 'utf.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR, 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'forum.context_processors.base_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'utf.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEVELOPMENT_MODE is True:
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
        },
        "archive": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": os.path.join(BASE_DIR, "archive.sqlite3"),
        }
    }
elif len(sys.argv) > 0 and sys.argv[1] != 'collectstatic':
    if os.getenv("DATABASE_URL", None) is None:
        raise Exception("DATABASE_URL environment variable not defined")
    if os.getenv("ARCHIVE_DATABASE_URL", None) is None:
        raise Exception("ARCHIVE_DATABASE_URL environment variable not defined")
    DATABASES = {
        "default": dj_database_url.parse(os.environ.get("DATABASE_URL")),
        "archive": dj_database_url.parse(os.environ.get("ARCHIVE_DATABASE_URL")),
    }

DATABASE_ROUTERS = ['utf.routers.DatabaseAppsRouter']

# Cache configuration - different setup for development vs production
if DEVELOPMENT_MODE:
    # Development: Use dummy cache or local Redis without auth
    USE_REDIS_IN_DEV = os.getenv('USE_REDIS_IN_DEV', 'False') == 'True'
    
    if USE_REDIS_IN_DEV:
        # Use local Redis without authentication for development
        CACHES = {
            'default': {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': 'redis://127.0.0.1:6379/0',
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                    'CONNECTION_POOL_KWARGS': {
                        'retry_on_timeout': True,
                        'socket_connect_timeout': 2,
                        'socket_timeout': 2,
                    },
                },
                'KEY_PREFIX': 'utf_forum_dev',
                'TIMEOUT': 60 * 15,  # 15 minutes for development
            }
        }
    else:
        # Use dummy cache for development (no Redis needed)
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
            }
        }
else:
    # Production: Use Redis with authentication
    REDIS_URL = os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/0')
    REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
    
    # Build Redis URL with authentication
    if REDIS_PASSWORD:
        if not REDIS_URL.startswith('redis://:'):
            # Parse and rebuild URL with password
            if 'redis://' in REDIS_URL:
                redis_part = REDIS_URL.replace('redis://', '')
                REDIS_URL = f'redis://:{REDIS_PASSWORD}@{redis_part}'
    
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': REDIS_URL,
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'CONNECTION_POOL_KWARGS': {
                    'retry_on_timeout': True,
                    'socket_connect_timeout': 5,
                    'socket_timeout': 5,
                    'health_check_interval': 30,
                },
            },
            'KEY_PREFIX': 'utf_forum',  # Prevents key collisions with other apps
            'TIMEOUT': 60 * 60 * 12,  # Default 12 hour timeout
        }
    }

# Archive pages cache timeout (12 hours in seconds)
ARCHIVE_CACHE_TIMEOUT = 12 * 60 * 60  # 43200 seconds

# Celery configuration
if DEVELOPMENT_MODE:
    # Development: Use Redis or in-memory broker
    USE_REDIS_IN_DEV = os.getenv('USE_REDIS_IN_DEV', 'False') == 'True'
    
    if USE_REDIS_IN_DEV:
        # Use local Redis for development
        CELERY_BROKER_URL = 'redis://127.0.0.1:6379/1'  # Different DB than cache
        CELERY_RESULT_BACKEND = 'redis://127.0.0.1:6379/1'
    else:
        # Use in-memory broker for development (no Redis needed)
        CELERY_TASK_ALWAYS_EAGER = True
        CELERY_TASK_EAGER_PROPAGATES = True
        CELERY_BROKER_URL = 'memory://'
        CELERY_RESULT_BACKEND = 'cache+memory://'
else:
    # Production: Use Redis with authentication
    REDIS_URL = os.getenv('REDIS_URL', 'redis://127.0.0.1:6379/0')
    REDIS_PASSWORD = os.getenv('REDIS_PASSWORD')
    
    # For Celery, use DB 1 instead of DB 0
    CELERY_REDIS_URL = REDIS_URL.replace('/0', '/1')
    
    # Set Celery broker and result backend
    CELERY_BROKER_URL = CELERY_REDIS_URL
    CELERY_RESULT_BACKEND = CELERY_REDIS_URL

# Celery settings
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Europe/Paris'  # Same as TIME_ZONE
CELERY_ENABLE_UTC = True
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60  # 30 minutes
CELERY_TASK_SOFT_TIME_LIMIT = 60  # 1 minute
CELERY_WORKER_PREFETCH_MULTIPLIER = 1
CELERY_WORKER_MAX_TASKS_PER_CHILD = 1000

# Optional: Celery beat schedule for periodic tasks
CELERY_BEAT_SCHEDULE = {
    # Example periodic task
    # 'cleanup-expired-sessions': {
    #     'task': 'your_app.tasks.cleanup_expired_sessions',
    #     'schedule': crontab(minute=0, hour=2),  # Daily at 2 AM
    # },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Logging configuration

import logging.handlers

if DEVELOPMENT_MODE:
    log_file = os.path.join(BASE_DIR, 'django_debug_DEV.log')
    error_log_file = os.path.join(BASE_DIR, 'django_error_DEV.log')
else:
    log_file = os.path.join(BASE_DIR, 'django_debug.log')
    error_log_file = os.path.join(BASE_DIR, 'django_error.log')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose' if DEVELOPMENT_MODE else 'simple',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': log_file,
            'formatter': 'verbose',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
        },
        'error_file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': error_log_file,
            'formatter': 'verbose',
            'level': 'ERROR',
            'maxBytes': 1024*1024*15,  # 15MB
            'backupCount': 10,
        },
    },
    'loggers': {
        'forum.tasks': {
            'handlers': ['console', 'file'] if DEVELOPMENT_MODE else ['file', 'error_file'],
            'level': 'DEBUG' if DEVELOPMENT_MODE else 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console', 'file'] if DEVELOPMENT_MODE else ['file', 'error_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['error_file'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
    'root': {
        'handlers': ['console'] if DEVELOPMENT_MODE else ['file'],
        'level': 'INFO',
    },
}


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'fr'

TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


# CSRF and Session Security Settings
if DEVELOPMENT_MODE:
    # Development settings
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    CSRF_COOKIE_HTTPONLY = False
    CSRF_USE_SESSIONS = False
    CSRF_TRUSTED_ORIGINS = [
        'http://localhost', 
        'http://127.0.0.1:8000',
        'http://127.0.0.1:8080',
        'http://localhost:8000',
        'http://localhost:8080'
    ]
else:
    # Production settings
    CSRF_COOKIE_SECURE = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_HTTPONLY = True
    CSRF_USE_SESSIONS = True
    CSRF_COOKIE_SAMESITE = 'Strict' 
    SESSION_COOKIE_SAMESITE = 'Strict'
    CSRF_TRUSTED_ORIGINS = [
        'https://utf-rewritten.org', 
        'https://www.utf-rewritten.org'
    ]

# Additional security settings for production
if not DEVELOPMENT_MODE:
    SECURE_SSL_REDIRECT = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

CSRF_FAILURE_VIEW = 'django.views.csrf.csrf_failure'

INTERNAL_IPS = [
    "127.0.0.1",
    "localhost"
]

THEME_LIST = ['classic', 'modern', 'test']  # Add more themes here
DEFAULT_THEME = 'modern'  # Default theme for fallback